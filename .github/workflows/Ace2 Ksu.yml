name: Build OnePlus Ace 2 Kernel

on:
  workflow_dispatch:
    inputs:
      CPU:
        description: "OnePlus 内核分支（如 sm8475）"
        required: true
        default: 'sm8475'
      FEIL:
        description: "OnePlus 内核配置文件（如 oneplus_ace2_v）"
        required: true
        default: 'oneplus_ace2_v'
      CPUD:
        description: "设备代号（如 waipio）"
        required: true
        default: 'waipio'
      ANDROID_VERSION:
        description: "安卓版本（如 android12）"
        required: true
        default: 'android12'
      KERNEL_VERSION:
        description: "内核版本（如 5.10）"
        required: true
        default: '5.10'
      BUILD_METHOD:
        description: "编译方式（如 gki）"
        required: true
        default: 'gki'
      KSUNEXT_ENABLED:
        description: "是否集成 KernelSU-Next"
        required: true
        type: boolean
        default: true
      SUSFS_ENABLED:
        description: "是否集成 SUSFS"
        required: true
        type: boolean
        default: true
      SUSFS_VERSION:
        description: "SUSFS 版本（如 v1.5.7）"
        required: true
        default: 'v1.5.7'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Install Dependencies
        run: |
          sudo apt update && sudo apt upgrade -y
          sudo apt install -y python3 git curl repo patch bc bison flex libssl-dev zip

      - name: Configure Git
        run: |
          git config --global user.name "build"
          git config --global user.email "build@example.com"

      - name: Initialize and Sync Kernel Repo
        run: |
          mkdir kernel_workspace || exit 1
          cd kernel_workspace || exit 1
          repo init -u https://github.com/OnePlusOSS/kernel_manifest.git \
                   -b "refs/heads/oneplus/${{ github.event.inputs.CPU }}" \
                   -m "${{ github.event.inputs.FEIL }}.xml" --depth=1 || exit 1
          repo sync --force-sync --no-tags --no-clone-bundle -j1 || exit 1
          rm -f kernel_platform/common/android/abi_gki_protected_exports_* || echo "No protected exports"
          rm -f kernel_platform/msm-kernel/android/abi_gki_protected_exports_* || echo "No protected exports"
          sed -i 's/ -dirty//g' kernel_platform/common/scripts/setlocalversion
          sed -i 's/ -dirty//g' kernel_platform/msm-kernel/scripts/setlocalversion

      - name: Set LTO to ThinLTO
        run: |
          cd kernel_workspace/kernel_platform || exit 1
          sed -i 's/CONFIG_LTO=n/CONFIG_LTO=y/' ./common/arch/arm64/configs/gki_defconfig
          sed -i 's/CONFIG_LTO_CLANG_FULL=y/CONFIG_LTO_CLANG_THIN=y/' ./common/arch/arm64/configs/gki_defconfig
          sed -i 's/CONFIG_LTO_CLANG_NONE=y/CONFIG_LTO_CLANG_THIN=y/' ./common/arch/arm64/configs/gki_defconfig

      - name: Set up KernelSU-Next
        if: ${{ github.event.inputs.KSUNEXT_ENABLED == 'true' }}
        run: |
          cd kernel_workspace/kernel_platform || exit 1
          curl -LSs "https://raw.githubusercontent.com/rifsxd/KernelSU-Next/next/kernel/setup.sh" | bash -s next || exit 1
          cd KernelSU-Next || exit 1
          KSU_VERSION=$(( $(git rev-list --count HEAD) + 10200 ))
          echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
          sed -i "s/DKSU_VERSION=[0-9]*/DKSU_VERSION=${KSU_VERSION}/" kernel/Makefile

      - name: Clone and Apply SUSFS & Other Patches
        if: ${{ github.event.inputs.SUSFS_ENABLED == 'true' }}
        run: |
          cd kernel_workspace || exit 1
          git clone https://gitlab.com/simonpunk/susfs4ksu.git -b gki-${{ github.event.inputs.ANDROID_VERSION }}-${{ github.event.inputs.KERNEL_VERSION }} || exit 1
          git clone https://github.com/WildPlusKernel/kernel_patches.git || exit 1
          cd kernel_platform || exit 1
          cp ../kernel_patches/next/0001_susfs_157_for_ksunext.patch ./KernelSU-Next/
          cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ github.event.inputs.ANDROID_VERSION }}-${{ github.event.inputs.KERNEL_VERSION }}.patch ./common/
          cp -r ../susfs4ksu/kernel_patches/fs/* ./common/fs/
          cp -r ../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/
          cd KernelSU-Next
          patch -p1 < 0001_susfs_157_for_ksunext.patch || true
          cd ../common
          patch -p1 < 50_add_susfs_in_gki-${{ github.event.inputs.ANDROID_VERSION }}-${{ github.event.inputs.KERNEL_VERSION }}.patch || true
          cp ../../kernel_patches/next/syscall_hooks.patch ./
          patch -p1 -F 3 < syscall_hooks.patch
          cp ../../susfs4ksu/kernel_patches/next/fix_core_hook.c.patch ./KernelSU-Next/
          cp ../../susfs4ksu/kernel_patches/next/fix.ksud.c.patch ./KernelSU-Next/
          cp ../../susfs4ksu/kernel_patches/next/fix_selinux.c.patch ./KernelSU-Next/
          cp ../../susfs4ksu/kernel_patches/next/fix_sucompat.c.patch ./KernelSU-Next/
          cp ../../susfs4ksu/kernel_patches/next/fix_apk_sign.c.patch ./KernelSU-Next/
          cp ../../susfs4ksu/kernel_patches/next/manager.patch ./KernelSU-Next/
          cd KernelSU-Next
          patch -p1 -F 3 < fix_core_hook.c.patch || true
          patch -p1 -F 3 < fix.ksud.c.patch || true
          patch -p1 -F 3 < fix_selinux.c.patch || true
          patch -p1 -F 3 < fix_sucompat.c.patch || true
          patch -p1 -F 3 < fix_apk_sign.c.patch || true
          patch -p1 -F 3 < manager.patch || true
          cd ../..
          cd kernel_platform/common
          git add -A && git commit -m "Apply SUSFS and KSU patches" || true
          cd ../msm-kernel
          git add -A && git commit -m "Apply SUSFS and KSU patches" || true

      - name: Add KernelSU Configuration Flags
        run: |
          cd kernel_workspace/kernel_platform/common/arch/arm64/configs || exit 1
          echo "CONFIG_KSU=y" >> gki_defconfig
          echo "CONFIG_KSU_WITH_KPROBES=n" >> gki_defconfig
          echo "CONFIG_KSU_SUSFS=y" >> gki_defconfig
          echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> gki_defconfig
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> gki_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> gki_defconfig
          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> gki_defconfig
          echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> gki_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> gki_defconfig
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> gki_defconfig
          sed -i '2s/check_defconfig//' ../../common/build.config.gki

      - name: Build Kernel (single-core)
        run: |
          cd kernel_workspace || exit 1
          MAKEFLAGS="-j1" ./kernel_platform/oplus/build/oplus_build_kernel.sh ${{ github.event.inputs.CPUD }} ${{ github.event.inputs.BUILD_METHOD }} || exit 1

      - name: Package AnyKernel3 Zip
        run: |
          git clone https://github.com/Kernel-SU/AnyKernel3 --depth=1 AnyKernel3 || exit 1
          rm -rf AnyKernel3/.git
          
          # 检查并复制内核镜像文件
          IMAGE_PATH="kernel_workspace/kernel_platform/out/msm-${{ github.event.inputs.CPUD }}-${{ github.event.inputs.CPUD }}-gki/dist"
          
          if [ ! -f "$IMAGE_PATH/Image" ]; then
            echo "Error: Kernel image not found at $IMAGE_PATH/Image"
            exit 1
          fi
          cp "$IMAGE_PATH/Image" AnyKernel3/
          
          # 复制 dtbo.img（如果存在）
          if [ -f "$IMAGE_PATH/dtbo.img" ]; then
            cp "$IMAGE_PATH/dtbo.img" AnyKernel3/
          fi
          
          # 复制 Image.gz-dtb（如果存在）          # 确保目录存在
          run: |
              BUILD_OUT_DIR="kernel_workspace/kernel_platform/out/msm-${{ github.event.inputs.CPUD }}-${{ github.event.inputs.CPUD }}-gki/dist"
              if [ ! -d "$BUILD_OUT_DIR" ]; then
                echo "Error: Build output directory does not exist: $BUILD_OUT_DIR"
                exit 1
              fi

          # 复制 Image.gz-dtb（如果存在）
          - name: Copy kernel image
            run: |
              IMAGE_PATH="kernel_workspace/kernel_platform/out/msm-${{ github.event.inputs.CPUD }}-${{ github.event.inputs.CPUD }}-gki/dist/Image.gz-dtb"
              if [ -f "$IMAGE_PATH" ]; then
                cp "$IMAGE_PATH" AnyKernel3/
              else
                echo "Error: Kernel image not found at: $IMAGE_PATH"
                exit 1
              fi
          if [ -f "$IMAGE_PATH/Image.gz-dtb" ]; then
            cp "$IMAGE_PATH/Image.gz-dtb" AnyKernel3/
          fi
          
          cd AnyKernel3 || exit 1
          zip -r ../OnePlusAce2_KernelSUNext_${{ github.event.inputs.FEIL }}.zip ./ || exit 1

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Ace2-KernelSUNext-${{ github.event.inputs.FEIL }}
          path: |
            OnePlusAce2_KernelSUNext_${{ github.event.inputs.FEIL }}.zip
            kernel_workspace/kernel_platform/out/msm-${{ github.event.inputs.CPUD }}-${{ github.event.inputs.CPUD }}-gki/dist/Image
            kernel_workspace/kernel_platform/out/msm-${{ github.event.inputs.CPUD }}-${{ github.event.inputs.CPUD }}-gki/dist/dtbo.img
            kernel_workspace/kernel_platform/out/msm-${{ github.event.inputs.CPUD }}-${{ github.event.inputs.CPUD }}-gki/dist/Image.gz-dtb
